}
c<-makeVector(1,2,3)
c<-makeVector(c(1,2,3)
)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-cachemean(c)
v
v<-cachemean(c)
c<-makeVector(c(1,2,3,4)
)
v<-cachemean(c)
v<-cachemean(c)
c<-makeVector(c(1,2,3)
)
v<-cachemean(c)
c<-makeVector(c(1,2,3))
a<-makeVector(c(2,3,4))
i<-cachemean(a)
j<-cachemean(a)
j<-cachemean(c)
j<-cachemean(a)
j<-cachemean(c)
help ("<<-")
f<-function (x)
{}
f<-function (x){
m<<-x
}
m<4
m<-4
m<-f(5)
m<-4
m<-f(532)
f<-function (x){
c<<-x
}
m<-4
m<-f(532)
m<-f(5)
f<-function (x){
l<<-x
}
m<-f(5)
m<-4
m<-f(5)
m<-123
m<-f(456)
f<-function (x){
l<<-x
}
m<-f(456)
?mean
mat<-matrix(1:9,3,3)
View(mat)
solve(mat)
solve(a=mat)
solve(as.numeric(mat)
)
View(mat)
mat<-matrix(1:4,2,2)
solve(mat)
mat<-matrix(1:25,5,5)
solve(mat)
mat<-matrix(1:20,5,4)
solve(mat)
mat<-matrix(3:27,5,5)
solve(mat)
mat<-matrix(5:30,5,5)
mat<-matrix(5:29,5,5)
solve(mat)
mat<-matrix(2:5,2,2)
solve(mat)
mat<-matrix(6:9,2,2)
solve(mat)
makeVector <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
makeVector <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmean(m)
m
}
mat<-(matrix(2:5, 2,2))
View(mat)
cachemean(mat)
View(mat)
mat<-makeVector(matrix(2:5, 2,2))
cachemean(mat)
cachemean(mat)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replacement=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
library(swirl)
swirl()
LETTERS
sample(LETTERS)
flips<- sample(0:1, 100, prob=c(0.3,0.7))
flips <- sample(0:1, 100, prob=c(0.3,0.7), replace=TRUE)
flips <- sample(0:1, 100, replace=TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(1, size = 100, prob = 0.7
)
flips2<-rbinom(1, size = 100, prob = 0.70
0
flips2<-rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
swirl()
library(swirl)
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot subtitle")
plot(cars, sub = "My Plot Subtitle")
?plot
?par
plot(cars, bg="red")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
mtcars
data(mycr=cars)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSolve <- function(solve) m <<- solve
getSolve <- function() m
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getSolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setSolve(m)
m
}
makeCacheMatrix(c(4,5), c(8,9))
l<-makeCacheMatrix(c(4,5), c(8,9))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSolve <- function(solve) m <<- solve
getSolve <- function() m
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getSolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setSolve(m)
m
}
l<-makeCacheMatrix(c(4,5), c(8,9))
l<-makeCacheMatrix(5:8, 2,2)
l<-makeCacheMatrix(matrix(5:8, 2,2)
)
k<-cacheSolve(l)
k<-cacheSolve(l)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSolvedMatrix <- function(solve) m <<- solve
getSolvedMatrix <- function() m
list(set = set, get = get,
setSolvedMatrix = setSolvedMatrix,
getSolvedMatrix = getSolvedMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getSolvedMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setSolvedMatrix(m)
m
}
l<-makeCacheMatrix(5:8, 2,2)
l<-makeCacheMatrix(matrix(5:8, 2,2))
k<-cacheSolve(l)
k<-cacheSolve(l)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
apply(iris[, 1:4], 2, mean)
apply(mtcars[, 1:4], 2, mean)
tapply(mtcars, mtcars$hp, mean)
mtcars$hp
tapply(mtcars, mtcars$cyl, ColMeans)
with(mtcars, tapply(hp, cyl, mean))
meanHp<-with(mtcars, tapply(hp, cyl, mean))
class(meanHp)
meanHp[3]
meanHp[3]-meanHp[1]
meanHp[1]
outcome[, 11] <- as.numeric(outcome[, 11])
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("~/GitHub/R/Hospital Quality")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
x<-which(outcome$State=="BB")
x
x<-which(outcome$State=="TX")
x
class(x)
outcome[x]
outcome[[x]]
outcome
View(outcome)
class(outcome)
outcome[x]
x<-which(outcome$State=="TX", arr.ind = TRUE)
x
class(x)
x<-which(outcome$State=="TX", arr.ind = FALSE)
class(x)
x<-which(outcome$State=="TX")
x<-which(outcome$State=="MT")
x
head(outcome)
View(outcome)
outcome[x]
outcome[x][,11]
outcome[,11]
y<-outcome[,11]
class(y)
y[x]
as.numeric(y[x])
min(as.numeric(y[x]),na.rm = TRUE)
x<-which(outcome$State=="MT")
x<-which(outcome$State=="MT")
y<-which.min(outcome[,11][x])
y
outcome[,2][y]
outcome[,"Pneumonia"][y]
names(outcome)
outcome[,"Hospital.30.Day.Readmission.Rates.from.Pneumonia"][y]
y<-which.min(outcome[,"Hospital.30.Day.Readmission.Rates.from.Pneumonia"][x])
outcome[,2][y]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Hospital.30.Day.Readmission.Rates.from.Pneumonia"][x])
outcome[,2][y]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"][x])
outcome[,2][y]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"][x])
outcome[,2][y]
y
x
outcome[,2][y]
outcome[,2][x]
outcome[,18][x]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"][x])
outcome[,2][y]
View(outcome)
x<-which(outcome$State=="MD")
outcome[,"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"][x]
x<-which(outcome$State=="MD")
outcome[,2][34]
x<-which(outcome$State=="MD")
outcome[,2][34]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"][x])
outcome[,2]x[[y]]
x<-which(outcome$State=="MD")
y<-which.min(outcome[,"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"][x])
outcome[x[[y]],2]
setwd("~/GitHub/R/Hospital Quality")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"][x])
outcome[x[[y]],2]
alias<-c("heart attack", "heart failure", "pneumonia")
names<-c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
matrix(alias, names)
c(alias, names)
data.frame(alias, names)
aliases <- data.frame(alias, names)
subset(aliases$names, subset=alias="pneumonia")
subset(aliases$names, subset=aliases$alias="pneumonia")
subset(aliases$names, aliases$alias="pneumonia")
subset(aliases$names, "aliases$alias=pneumonia")
subset(aliases$names, aliases$alias=="pneumonia")
as.character(subset(aliases$names, aliases$alias=="pneumonia"))
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="pneumonia"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],2]
alias<-c("heart attack", "heart failure", "pneumonia")
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="pneumonia"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],2]
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="heart attack"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],2]
aliases
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="heart attack"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],2]
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="heart failure"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],2]
#create aliases dataframe to identify outcome name
alias <- c("heart attack", "heart failure", "pneumonia")
names <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
aliases <- data.frame(alias, names)
param <- as.character(subset(aliases$names, aliases$alias=="heart failure"))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x<-which(outcome$State=="TX")
y<-which.min(outcome[,param][x])
outcome[x[[y]],"Hospital.Name"]
